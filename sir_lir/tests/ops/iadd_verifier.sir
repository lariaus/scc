// XTEST: sir-opt
// XTEST-OUTPUT-CHECK

module {

// CHECK-NOT: Error
function @add_i32(%arg0: i32, %arg1: i32) -> (i32) {
    %0 = lir.iadd %arg0, %arg1: i32
    return %0: i32
}

// CHECK: Error: Input #0 (lhs) must be a LIR integer scalar, but got f32
// CHECK-NEXT: %0 = lir.iadd %arg0, %arg1: f32
function @fail_add_fp(%arg0: f32, %arg1: f32) -> (f32) {
    %0 = lir.iadd %arg0, %arg1: f32
    return %0: f32
}

// CHECK: Error: Input #0 (lhs) must be a LIR integer scalar, but got si32
// CHECK-NEXT: %0 = lir.iadd %arg0, %arg1: si32
function @fail_add_signed(%arg0: si32, %arg1: si32) -> (si32) {
    %0 = lir.iadd %arg0, %arg1: si32
    return %0: si32
}

// CHECK: Error: Input #0 (lhs) must be a LIR integer scalar, but got i24
// CHECK-NEXT: %0 = lir.iadd %arg0, %arg1: i24
function @fail_add_invalid_width(%arg0: i24, %arg1: i24) -> (i24) {
    %0 = lir.iadd %arg0, %arg1: i24
    return %0: i24
}

}