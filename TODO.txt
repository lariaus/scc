#### P0 Features #####

- [DONE] Implement a mutable IRVisitor (the visitor is mutable, not the IR) (+ helper fun in OperationImpl)
- [DONE] Add an helper to create a visitor / mut visitor from a lambda
- [DONE] Add a test with a mut lambda (similar to the count add with struct exisiting)
- [DONE] Add an IRVerifier struct with basic tests
- [DONE] Dispatch verify on each ops.
- [DONE] Add helper functions to call verifier on single op.
- [DONE] Add verifiers and tests for the TestOps.
- [DONE] Create new source file SIROptRunner (wich would be the equivalent of mlir-opt).
- [DONE] Create a tester (like Filechek) that use SIROptRunner.
- [DONE] Add a Tag feature for ops.
- [DONE] Add a new TerminatorOp tag.
- [DONE] In the verifier ensures every block terminates by a terminator.
- [DONE] Add Filecheck tests for terminator.
- [DONE] Add a new FunctionType (and unit tests).
- [DONE] Add a new TypeAttr (and unit tests).
- [DONE] Add a function_type attr to TestFuncOp (and block operand checks).
- [DONE] Add unit tests for with function_type and block operand types.
- [DONE] Add a verifier for TestReturnOp check of operands with function_type.
- [DONE] Add unit tests with the TestReturnOp.
- [DONE] Add unit tests with TestFuncOp without operands / results.
- [DONE] Add a label attr to TestFuncOp and update all the tests.
- [DONE] Update SIROptRunner to use the output path argument properly.
- [DONE] Create a basic util helper class based on callbacks to read CLI arguments.
- [DONE] update SIROpRunner with an -h / --help option that prints the usage.
- [DONE] update SIROpRunner with a --version option that prints some information.
- [DONE] Create a new binary sir-opt that uses SIROptRunner.
- [DONE] Create a new sir_func package
- [DONE] Defines Module, Function, and Return op (they are copied from test ops)
- [DONE] Add basic Filecheck unit tests for it.
- [DONE] Create a new sir_math package
- [DONE] Define MathIAddOp (copied from TestAddOp)
- [DONE] Remove the old arith_ops file.
- [DONE] Add basic Filecheck unit tests for it (using fun too).
- [DONE] Call it from sir-opt.
- [DONE] Update sir-opt example in README.MD with an example out of math ops.
- [DONE] Create a ConstantOp that just takes a scalar number attr.
- [DONE] Add UnitTests for it.
- [DONE] Design a Pass interface (all it does is runOnOperation(&mut ctx, op: OperationID))
- [DONE] Create a new class called IRRewriter (it has a IRBuilder field, but does much more powerful things)
- [DONE] Create a new OpTransform interface (similar to an OpPatternRewriter in MLIR): has few methods: priority() / canTransformOp() / transformOp().
- [DONE] Create functions that take a root op, a list of transforms, and apply it to the Graph. (Eg apply_once, apply_greedy, etc).
- [DONE] Define a PassManager class that can run a sequence of passes.
- [DONE] Define a new function like apply_single_pass_transforms, but keep applying patterns on edited / created ops.
- [DONE] Add a new Pure tag op to allow applying CSE on ops. 
- [DONE] Create a new CSE Pass that remove unused and identical ops (don't handle blocks for now).
- [DONE] Add unit tests for CSE.
- [DONE] Update the builtin interface to use the same interface than the others.
- [DONE] Write a Python / comment based generator for ops.
- [DONE] Move verifiers to be generated automatically from the defs.
- [DONE] Automatically generate the clone method of BuiltinOp.
- [DONE] Create new library sir_lir that contain low level ops (similar to LLVM). Add iadd, but don't redefine func ops for it.
- [DONE] Fix IRPrinter to correctly support printing part of the IR, and using the generic form if verification fails. 
- [DONE] Create a new function, like apply_single_pass_transforms, called legalize_ir whose goal is to apply "transforms" to legalize IR.
- [DONE] Create a new library, low_level_ir, with a new pass LegalizeToLowLevel, and a new tag LowLevelOp.
- [DONE] Mark all lir_ops with the tag
- [DONE] Create a new Interface ConditionallyLowLevelOp with a function to check wether a function is LowLevel or not.
- [DONE] The LegalizeToLowLevel checks and apply transforms on all ops that are not LowLevel.
- [DONE] Add transforms to legalize function op to LowLevel.
- [DONE] Add transforms to legalize math ops to lir_ops.
- [DONE] Add legalization unit test for function op (return si32 operand) 
- [DONE] Add legalization unit test for math (si32 add op).
- [DONE] Create sir_interpreter lib with SIRInterpreter class.
- [DONE] Create InterpretableComputeOp interface for simple ops that just take a list of attribute as input, and return a list of attributes as output.
- [DONE] Add a method canCanonicalizeOp that would use the canonicalize pass to fold InterpretableComputeOp ops with constants inputs. 
- [DONE] Add unit test for the canonicalize method of lir.
- [DONE] Create InterpretableOp for ops with control flow, that access the whole Interpreter object.
- [DONE] Create sir_runner lib that can be used somehow through unit tests to run and check functions (through many means, interpreter things) 
- [DONE] Create sir-runner binary to run any program through sir.
- [DONE] Add unit test running the interpreter.
- [DONE] Add mem dialect and the load / store / alloca ops
- [DONE] Add unit tests for them
- [DONE] Add the same load / store / alloca ops to LIR dialect.
- [DONE] Add unit tests for them
- [DONE] Add lowerings from mem to sir
- [DONE] Add unit tests for the lowerings
- [DONE] Automatically generate a "new" methods for the ops (with option disable_default_builder)
- [DONE] Add a pass to lower CAST to SIR
- [DONE] Add unit tests for the lowering for a basic add.
- [DONE] Add some new library with pipelines to lower any SIR program to LIR.
- [DONE] Add unit tests for the full lowering.
- [DONE] Define a new attribute to represent pointer values.
- [DONE] Write the interpreter implementation for alloca, load, store with unit tests
- [DONE] Add a new binary scc-runner that can run a C program.
- [DONE] Add unit tests for scc-runner to run a basic add through the interpreter.
- [DONE] Get rid of the warnings for the test ops.
- [DONE] Search and add run examples for all binaries in the README file.
- Add a new instruction selection mechanism and pass.
- Add pass to do instruction selection to Apple-ARM.
- Add unit test for a basic add.
- Add unit test for a basic add (stack values).
- Add new mechanism to represent registers and handle register allocation.
- Add pass to do register allocation for Apple-ARM.
- Add unit test for a basic add.
- Add unit test for a basic add (stack values).
- Add new mechanism to emit assembly code.
- Add new library compiler_utils that can be used to call the assembler / compiler / linker / etc ...
- Add new library sir_compile that can compile a final SIR (no passes) to assembly or binary file
- Add new library sir_translate that can do translation from SIR (no passes) to Assembly or binary (call assembler / linker / etc)
- Add new binary sir-translate using sir_translate
- Update sir_runner library to support compile + run program with sir_compile.
- Update sir-runner binary to support run.
- Add a new pipeline / library to go from LIR to Assembly SIR (and support Arm-Apple).
- Add unit test for a basic add.
- Add unit test for a basic add (stack values).
- Add a new system to run tests with sir-runner going through SIR to LIR then LIR to ASM.
- Add unit test for a basic add.
- Add unit test for a basic add (stack values).
- Update binary scc-runner to go through the compiler.
- Update scc-runner test system to go through the compiler.
- Add unit test for a basic add.
- [DONE] Update scc binary to support taking a source c file and emitting AST IR.
- [DONE] Update scc binary to support taking a source c file and emitting high level SIR.
- [DONE] Update scc binary to support taking a source c file and emitting LIR.
- Update scc binary to support taking a source c file and ASM SIR.
- Update scc binary to support taking a source c file and emitting ASM file.
- Update scc binary to support taking a source c file and emitting object binary.
- Update scc binary to support taking a source c file and emitting binary file.
- ...

#### P1 Features #####

- Update SIROptRunner to read from stdin when no input path is specified.

Divide IRContent between IR Nodes and Op Infos:
- Rename IRContext to IRGraph
- Add root field (Option<OperationID>) to IRGraph.
- Create a new IRContext class (and move the op infos to live there)
- Update the IRParser to have a single parse method that takes both the graph (&mut) and context (&).
- @TODO[I1][SIR-CORE]: Remove BuiltinOpInterfaceWrapper.clone() hack
    Clone needed only for the parser. 
    The context is mutable, but we need it for the parser non-mutable.


#### P1 Improvments #####

- @TODO[I0][SIR-CORE]: ValuesDefsScope: optimize `fill_with_predecessors_defs`
    We're visiting many blocks that we don't need to.
    Only visit a block if it's a predecessor


- @TODO[I2][SIR-CORE]: Support using stdin for input of SIROptRunner.

- @TODO[B3][SIR-CORE]: GreedyIRTRansformer applying transforms every time an op change might lead to infinite loop. We need a limit to stop this.

- @TODO[I4][SIR-CORE]: Deleting ops in order won't work if the block is in an invalid state.
    Instead we should delete all ops at once and update the users if they are not in this block.

- @TODO[I5][SIR-FUNC]: Consider moving GenericConstantOp to another lib.

- @TODO[I6][SIR-FUNC]: Replace math.constant with generic.constant.

- @TODO[I7][XTEST]: Avoid cloning all annotations for each TestConfig and just pass them around.

- @TODO[I8][SIR-CORE]: Find consistent way to register ops / transforms which avoids duplicate registrations.

- @TODO[I9][SIR-INTERPRETER]: Make the Interpreter memory safe.
    SIR represents a IR / language without safety guarantees.
    Instead we should have the interpreter ensuring every potentially operation we do is actually safe.
    I don't know if this is even possible / worth it.

- @TODO[I10][SIR-INTERPRETER]: Use real types instead of Attributes in the interpreter.
    Currently we use Attributes to represent all values in the interpreter.
    First, it's slow.
    Second, it'll give us incorrect results / crashes if the IR is doing weird things with the pointers.