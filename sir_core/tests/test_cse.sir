// XTEST: sir-opt --cse
// XTEST-OUTPUT-CHECK

test.mod {

// Remove unused add
// CHECK: test.fun @unused_op(%arg0: i32) -> (i32)
// CHECK-NEXT: test.return %arg0 : i32
test.fun @unused_op(%arg0: i32) -> (i32) {
    %0 = test.add %arg0, %arg0 : i32
    test.return %arg0 : i32
}

// Remove second duplicated add.
// CHECK: test.fun @same_op(%arg0: i32) -> (i32, i32)
// CHECK-NEXT: %0 = test.add %arg0, %arg0 : i32
// CHECK-NEXT: test.return %0, %0 : i32, i32
test.fun @same_op(%arg0: i32) -> (i32, i32) {
    %0 = test.add %arg0, %arg0 : i32
    %1 = test.add %arg0, %arg0 : i32
    test.return %0, %1: i32, i32
}

// Recursive fibo(6): fibo(n) = fibo(n-1) + fibo(n-2)
// CSE should simplify it to the optimal version.
// CHECK: test.fun @complex_fact(%arg0: i32, %arg1: i32) -> (i32)
// CHECK-NEXT: %0 = test.add %arg1, %arg0 : i32
// CHECK-NEXT: %1 = test.add %0, %arg1 : i32
// CHECK-NEXT: %2 = test.add %1, %0 : i32
// CHECK-NEXT: %3 = test.add %2, %1 : i32
// CHECK-NEXT: %4 = test.add %3, %2 : i32
// CHECK-NEXT: test.return %4 : i32
test.fun @complex_fact(%0: i32, %1: i32) -> (i32) {
    %2 = test.add %1, %0 : i32
    %3 = test.add %2, %1 : i32
    %4 = test.add %1, %0 : i32
    %5 = test.add %3, %4 : i32
    %6 = test.add %1, %0 : i32
    %7 = test.add %6, %1 : i32
    %8 = test.add %5, %7 : i32
    %9 = test.add %1, %0 : i32
    %10 = test.add %9, %1 : i32
    %11 = test.add %1, %0 : i32
    %12 = test.add %10, %11 : i32
    %13 = test.add %8, %12 : i32
    test.return %13 : i32
}

}